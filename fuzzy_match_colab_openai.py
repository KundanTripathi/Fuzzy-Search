# -*- coding: utf-8 -*-
"""Copy of Fuzzy_Match.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_GKyhEkViu2jBrfPDmnPwY3_PII0ttS9
"""

!pip install gradio pandas langchain openai

!pip install faiss-gpu

import openai
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import FAISS
from langchain.llms import OpenAI

import pandas as pd
from io import BytesIO
import gradio as gr

from getpass import getpass
import os

os.environ['OPENAI_API_KEY'] = getpass()

embeddings = OpenAIEmbeddings()
#docvecs = FAISS.from_texts(comp['NAME'], embeddings)

from google.colab import drive

drive.mount('/content/gdrive')

df1 = pd.read_excel(r'/content/gdrive/My Drive/Colab Notebooks/files_1.xlsx')
df2 = pd.read_excel(r'/content/gdrive/My Drive/Colab Notebooks/files_2.xlsx')

!pip install gspread==3.6

!pip install streamlit

import streamlit as st
import pandas as pd

def transform_dataframes(file1, file2):
    df1 = pd.read_excel(file1)
    df2 = pd.read_excel(file2)

    dataframes_1 = df1
    dataframes_2 = df2
    docvecs = FAISS.from_texts(dataframes_1['NAME'], embeddings)
    match = {}
    for i in dataframes_2['LIST']:
        match[i]=[docvecs.similarity_search_with_score(i)]

    lst = []
    matching_comp = ["matching_comp_01","matching_comp_02","matching_comp_03","matching_comp_04"]
    matching_dist = ["matching_distance_01","matching_distance_02","matching_distance_03","matching_distance_04"]
    for i in match.keys():
        final_dict= {}
        final_dict["company"] = [i.strip()]
        for j in range(4):
            final_dict[matching_comp[j]] = [match[i][0][j][0].page_content]
            final_dict[matching_dist[j]] = [match[i][0][j][1]]
        lst.append(final_dict)
    out = pd.DataFrame(columns = lst[0].keys())
    for i in range(len(lst)):
        out = pd.concat([out,pd.DataFrame(lst[i])],axis=0)
    out = out.reset_index(drop=True)

    return out

st.title("Excel Files Transformation and Display")

# Upload Excel files
uploaded_file1 = st.file_uploader("Upload Excel File 1", type=["xlsx"])
uploaded_file2 = st.file_uploader("Upload Excel File 2", type=["xlsx"])

# Perform transformation on button click
if st.button("Transform Dataframes"):
    if uploaded_file1 is not None and uploaded_file2 is not None:
        transformed_df = transform_dataframes(uploaded_file1, uploaded_file2)
        st.write("Transformed DataFrame:")
        st.write(transformed_df)
    else:
        st.warning("Please upload both Excel files.")

st.text("Note: After uploading the files, click the 'Transform Dataframes' button to see the transformed result.")